{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","text","setText","useState","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","handleUpClick","newText","toUpperCase","showAlert","handlelwClick","lwText","toLowerCase","handleCapClick","capitalizedText","split","map","word","charAt","slice","join","handleInverseClick","invertedText","char","handleDownloadClick","element","document","file","Blob","URL","createObjectURL","download","click","handleCtClick","length","Alert","alert","lower","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","aboutText","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.50d2919d.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n// import { Link } from 'react-router-dom';\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        {/* <Link  className=\"navbar-brand\" to=\"/\">\n          {props.title}\n        </Link> */}\n        {/* NON routing */}\n        <a  className=\"navbar-brand\" href=\"#\">\n          {props.title}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\n                Home\n              </Link> */}\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\n                Home\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              {/* <Link className=\"nav-link\" to=\"/about\">\n                {props.aboutText}\n              </Link> */}\n            </li>\n          </ul>\n          {/* <form className=\"d-flex\" role=\"search\">\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n          <button className=\"btn btn-primary\" type=\"submit\">Search</button>\n        </form> */}\n          <div\n            className={`form-check form-switch text-${\n              props.mode === \"light\" ? \"dark\" : \"light\"\n            }`}\n          >\n            <input\n              className=\"form-check-input\"\n              onClick={props.toggleMode}\n              type=\"checkbox\"\n              role=\"switch\"\n              id=\"flexSwitchCheckDefault\"\n            />\n            {/* <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enabel Dark Mode</label> */}\n            <label\n              className=\"form-check-label\"\n              htmlFor=\"flexSwitchCheckDefault\"\n            >\n              {props.mode === \"light\"\n                ? \"Enable Dark Mode\"\n                : \"Enable Light Mode\"}\n            </label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired,\n  aboutText: PropTypes.string.isRequired,\n};\n\n// Navbar.defaultProps ={\n//     title: \"Set title here\",\n//     aboutText: \"About Text Here\"\n// };","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const handleUpClick = () => {\n    // console.log(\"Uppercase eas clicked \"+text)\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlert(\"Converted to Upper case!\", \"success\")\n  };\n  const handlelwClick = () => {\n    let lwText = text.toLowerCase();\n    setText(lwText);\n    props.showAlert(\"Converted to Lower case!\", \"success\")\n  };\n  const handleOnChange = (event) => {\n    // console.log(\"onChange\")\n    setText(event.target.value); //concat the user text\n  };\n  const handleInverseClick = () => {\n    let invertedText = text\n      .split(\"\") // Split the text into an array of characters\n      .map((char) => {\n        // Invert the case for each character\n        return char === char.toLowerCase()\n          ? char.toUpperCase()\n          : char.toLowerCase();\n      })\n      .join(\"\"); // Join the characters back into a string\n\n    setText(invertedText); // Update the state with the new string\n    props.showAlert(\"Converted to Inverse case!\", \"success\")\n  };\n\n  const handleDownloadClick = () => {\n    const element = document.createElement(\"a\"); // Create a download link\n    const file = new Blob([text], { type: \"text/plain\" }); // Create a file with the text\n    element.href = URL.createObjectURL(file); // Create a link to the file\n    element.download = \"myFile.txt\"; // Set the file name\n    element.click(); // Simulate a click to download the file\n    props.showAlert(\"Downloaded successfully!\", \"success\")\n  };\n  \n  \n\n  const handleCtClick = () => {\n    setText(\"\");\n    props.showAlert(\"Cleared!\", \"success\")\n  };\n\n  const handleCapClick = () => {\n    let splitText = text.split(\" \"); // Split text into words\n    let capitalizedText = splitText.map((word) => {\n      //map look through each word in array\n      return word.charAt(0).toUpperCase() + word.slice(1);\n    }); // Capitalize each word\n    setText(capitalizedText.join(\" \")); // Join the words back into a sentence\n    props.showAlert(\"Capitalized successfully!\", \"success\")\n  };\n\n  const [text, setText] = useState(\"\");\n  //setText(\"new Text\");\n  return (\n    <>\n      <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\n        <h1>{props.heading}</h1>\n        <div className=\"mb-3\">\n          <textarea\n            className=\"form-control\"\n            value={text}\n            onChange={handleOnChange} //taky type krrsken\n            style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'}}\n            id=\"myBox\"\n            rows=\"8\"\n          ></textarea>\n        </div>\n        <button className=\"btn btn-primary\" onClick={handleUpClick}>\n          Convert to UpperCase\n        </button>\n        <button className=\"btn btn-primary mx-2\" onClick={handlelwClick}>\n          Convert to LowerCase\n        </button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleCapClick}>\n          Convert to Capital case\n        </button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleInverseClick}>\n          Convert to Inverse case\n        </button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleDownloadClick}>\n          Download Text\n        </button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleCtClick}>\n          Clear Text\n        </button>\n      </div>\n      <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\n        <h2>Your Text Summary</h2>\n        <p>\n          {text.split(\" \").length} words and {text.length} characters\n        </p>\n        <p>{0.008 * text.split(\" \").length} Minutes read</p>\n        <h2>Preview</h2>\n        <p>{text.length>0?text:\"Enter something in the text box above to preview it here\"}</p>\n      </div>\n    </>\n  );\n}","import React from 'react';  // Only once at the top\n\nexport default function Alert(props) {\n    const capitalize = (word) => {\n        const lower = word.toLowerCase(); \n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n\n    return (\n        props.alert && \n        <div>\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n            </div>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\r\nimport \"./App.css\"; \r\nimport Navbar from \"./components/Navbar\";\r\nimport TextForm from \"./components/TextForm\";\r\nimport Alert from \"./components/Alert\";\r\n// import About from \"./components/About\";\r\n// import { BrowserRouter as Router, Route, Routes } from \"react-router-dom\"; // Uncomment if using React Router\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light'); // Light or Dark mode\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type\r\n    });\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  }\r\n\r\n  const toggleMode = () => {\r\n    if (mode === 'light') {\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#042743';\r\n      showAlert(\"Dark mode is enabled\", \"success\");\r\n      document.title = 'TextUtils - Dark Mode';\r\n    }\r\n    else {\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light mode is enabled\", \"success\");\r\n      document.title = 'TextUtils - Light Mode';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} aboutText=\"About\"/>\r\n      <Alert alert={alert} />\r\n      <div className=\"container my-3\">\r\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}